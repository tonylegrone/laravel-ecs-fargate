
FROM node:20.3.1 AS node

WORKDIR /app

COPY . .

RUN npm install --global cross-env
RUN npm install
RUN npm run build


FROM php:7.4.33 AS composer

RUN apt-get update && apt-get install -y \
    git \
    openssh-server \
    unzip

WORKDIR /app

COPY --from=composer:2.3.5 /usr/bin/composer /usr/bin/composer

COPY . .

RUN mkdir -p /root/.ssh
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts
RUN ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts

RUN --mount=type=secret,id=ssh_key,target=/root/.ssh/id_rsa \
    composer install --no-progress --no-interaction

RUN composer dump-autoload --classmap-authoritative


# Used for prod build.
FROM php:7.4.33-fpm AS app

# Set environment variables
ENV PHP_OPCACHE_ENABLE=1
ENV PHP_OPCACHE_ENABLE_CLI=0
ENV PHP_OPCACHE_VALIDATE_TIMESTAMPS=1
ENV PHP_OPCACHE_REVALIDATE_FREQ=0

# Install dependencies.
RUN apt-get update && apt-get install -y \
    cmake \
    gnutls-dev \
    libbz2-dev \
    libcurl4-gnutls-dev \
    liblz4-dev \
    libmagickwand-dev \
    libmbedtls-dev \
    libmcrypt-dev \
    libonig-dev \
    libpq-dev \
    libssl-dev \
    libxml2-dev \
    libzip-dev \
    unzip

# Install PHP extensions.
RUN docker-php-ext-install \
    bcmath \
    bz2 \
    mysqli \
    opcache \
    pdo_mysql \
    zip

RUN pecl install \
    imagick \
    mcrypt-1.0.3 \
    redis-5.2.2

RUN docker-php-ext-enable \
    imagick \
    mcrypt \
    redis

# Copy configuration files.
COPY ./docker/stage/php-ini-overrides.ini /usr/local/etc/php/conf.d/
COPY ./docker/stage/php-fpm.conf /usr/local/etc/php-fpm.d/zz-app.conf

RUN mv /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini

# Set working directory to /var/www.
WORKDIR /var/www

# Adjust user permission & group.
RUN usermod --uid 1000 www-data
RUN groupmod --gid 1000 www-data

# Copy files from current folder to container current folder (set in workdir).
COPY --chown=1000:1000 . .

# Copy packages from composer stage.
COPY --from=composer --chown=1000:1000 /app/vendor /var/www/vendor/

# Copy compiled assets from node stage.
COPY --from=node --chown=1000:1000 /app/public /var/www/public/

USER 1000:1000

RUN php artisan route:cache

USER 0:0


FROM nginx:latest AS server

COPY ./docker/stage/nginx.conf /etc/nginx/nginx.conf
COPY ./docker/stage/.htpasswd /var/www/.htpasswd
COPY --from=node /app/public /var/www/public
